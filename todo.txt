/**
 * rough copy/paste of email thread I kept up with myself on ideas for..here...?
 */

x   create a dev branch for dev work
o   #welcome splash page
    x   connection test....sucess
    o   favicon/logo
    o   wireframe
    o   sidebar - about me
        o   profile pic, crop from FB, remove all background but face?
o   #resume
o   #breakroom-ramen
o   Wakatime integration
    (https://github.com/jestillore/wakatimejs)
o   security review, are we secure?
    locking down directory access:
    https://medium.com/@_bl4de/hidden-directories-and-files-as-a-source-of-sensitive-information-about-web-application-84e5c534e5ad
o   uptime/site monitoring
    free:
     https://uptimerobot.com/
     https://grafana.com/plugins/raintank-worldping-app
    cheap:
     https://updown.io/#pricing
o   google analytics (analytics.js)
o   page speed analyzer: https://wulfdeck.com/
o   import thoughtflow from notepad to here

read ENV vars on startup
https://github.com/RisingStack/multi-process-nodejs-example/blob/master/config/components/common.js
from https://www.reddit.com/r/node/comments/8eir7e/advanced_nodejs_project_structure_tutorial/





/*====================================
=            Architecture            =
====================================*/

- It will not process a lot of data
- Mostly middleware, other services do heavy lifting
- Async nature for handling multiple requests from different sources

.-------------------. .--------------------.
|    web browser    | |   mobile browser   |    <-- what needs to be visually pleasing & accessible
'-------------------' '--------------------'
.------------------------------------------.
|             REST API service             |    <-- what needs to be developed
'------------------------------------------'
.-----------------. .----------------------.
|       DB        | |    REST middleware   |    <-- what needs to be secured
|  Postgre SQL    | |       & services     |
'-----------------' '----------------------'


o   use ENV variables for deployment specific configs

    - make the app able to be deployed at any given moment
      by separating config & app internals

    - hit them with process.env object

    - https://blog.codeship.com/advanced-node-js-project-structure-tutorial/
    // config/config.js
    'use strict'
    // required environment variables
    [
      'NODE_ENV',
      'PORT'
    ].forEach((name) => {
      if (!process.env[name]) {
        throw new Error(`Environment variable ${name} is missing`)
      }
    })
    // validation...
    const { error, value: envVars } = joi.validate(process.env, envVarsSchema)
    if (error) {
      throw new Error(`Config validation error: ${error.message}`)
    }

    const config = {
      env: envVars.NODE_ENV,
      isTest: envVars.NODE_ENV === 'test',
      isDevelopment: envVars.NODE_ENV === 'development',
      logger: {
        level: envVars.LOGGER_LEVEL,
        enabled: envVars.LOGGER_ENABLED
      },
      server: {
        port: envVars.PORT
      }
      // ...
    }
    module.exports = config



o   dump the psuedo-paginated hash design


/*----------  (Suggested) Project Structure  ----------*/

.
|-- .git
|   `-- ...
|-- config
|   |-- webpack.config.js
|   |-- development.config.js
|   `-- ...
|-- models
|   |-- jsore
|   |   |-- index.js
|   |   `-- templates.js
|   |-- BreakRoomRamen
|   |   |-- index.js
|   |   |-- common.js
|   |   `-- tempaltes.js
|-- routes
|   |-- controllers     // request managers
|   |-- middlewares     // request middlewares
|   `-- routes.js       // define routes and middlewares
|-- services            // implement external services
|   `-- ...
|-- db                  // data access stuff
|   `-- index.js        // implement Sequalize ORM
|-- core                // business logic
|   |-- "accounts.js"   // some example files...
|   |-- "sales.js"      // ...
|   |-- "comments.js"   // ...
|   |-- ...
|-- utils               // other util libraries (formats, validation, etc)
|   `-- ...
|-- tests               // Mocha testing
|   |-- jsore
|   |-- BreakRoomRamen
|   `-- ...
|-- scripts             // standalone dev scripts...
|   `-- ...             // be sure to list these inside `npm scripts`
|-- deploy.js           // deployment automation
|-- git.ignore
|-- packagae.json
|-- package.lock
|-- README.md
|-- server.js           // app entry

// revised
.
|-- .git
|   `-- ...
|-- .gitignore
|-- breakroomramen
|   |-- utils               // 2nd leve Postgre access, etc
|   |   `-- ...
|   |-- auth
|   |   `-- ...             // user management
|   |-- index.js
|   |-- common.js
|   `-- templates.js
|-- jsore
|   |-- welcome
|   |   `-- welcome.js
|   |-- resume
|   |   `-- resume.js
|   |-- ramblings
|   |   |-- utils
|   |   |   `-- ...         // 2nd leve Postgre access, etc
|   |   `-- ramblings.js
|   `-- templates.js
|-- db                      // top-level Postgres management
|   `-- ...
|-- scripts                 // deployment automation
|   `-- deploy.js
|-- server.js               // main entry
|-- package.json
|-- README.md





/*----------  Modules  ----------*/

items with --> * <-- are maybes

Express
- expose app data
- manage HTTP requests
- handle HTTPS security
- routing API endpoints

Passport *
- user authentication
- session management
    (possible replacement: Axios)

Webpack *
- production vs development environment management
- config options handler
    (possible replacement: PM2)

Mocha
- unit testing


/*----------  Things to look into  ----------*/

Axios module
- API communication
- promise based HTTP client (make GET, POST requests)
- authentication
- send custom headers

Sequalize module
- promise based ORM for DB data access
- manage migrations, queries, transactions, etc

PM2 module
- prod environment management for Node apps





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

---------------------
index.html at jsore.com should be a breif explanation of my experience, formal
portfolio should be a sub directory that looks nice on the internet but can be
exported to a single page PDF or word doc without any overly eager coloring
formatting or pictures
---------------------

---------------------
../study-hall
OR
../study_hall
OR
../studyhall
OR
../StudyHall
?
---------------------

---------------------
make index.html at ../<studyhall>
-- a summary of what I do (basically make a ton of notes)
-- what my current base environment is and what services/apps/tech I'm using
-- what to expect within each area
-- what will be added in future
---------------------

---------------------
../<studyhall>/full-stack-adventures
OR
../<studyhall>/road-to-full-stack-development
OR
../<studyhall>/learn-all-the-things
(..then come to terms with the fact that it's basically not possible)
(..then realize you first need to learn how to learn...so so so many things to
    learn and so many ways to do those things)
---------------------

---------------------
Be prepared for future header/footer/sidebar and make everything modular, to
    just plop them in to existing pages

...maybe just stick some empty divs around the page as placeholders?
---------------------

---------------------
Propose/formulate a sitemap with short explanations of each item
---------------------

---------------------
Add to TODO's: seperate web/DNS+mail/database services across 3 separate
    servers, after cleaning up DNS on current linode VM
---------------------

---------------------
Does linode allow mail?
---------------------

---------------------
Need to establish a single reusable color scheme
---------------------

---------------------
Google ad services or other ad services without displa ying ads?
---------------------

---------------------
Do I need to do that stupid 'site uses cookies' or anything for gdpr?
---------------------

---------------------
Logo ideas? See attached
---------------------

---------------------
BUY STYLUS FOR MACBOOK, possibly compatible with iphone
---------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

More logo ideas attached

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So...

jsore.com = node/JS     // Do I need any license to use node.js logo? 

php.jsore.com = PHP notes/docs/examples instead of pure JS?
Make a PHP sub dir instead?

Subdomain VS directory at end of URI?


Create 'living document' about current server config

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

"explain what I'm doing like I'm explaining things to gma Cindy" and include
popups/tooltips/sidebartreethings that explain each step in more depth

"EXPLAIN LIKE IM OLD"

Ex:
-- What happens when you type a website into browser
-- What happens next
-- Why does the stuff appear on your monitor in your browser
-- How does the internet know what content to show
-- What happens when... (you log in, submit request for contact, click to ask to
    speak to someone, click a link to go to some other page on the website)

...etc etc etc, high level technical concepts and dive deeper

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~